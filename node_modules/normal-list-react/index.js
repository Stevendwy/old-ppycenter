'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./npm.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NormalList = function (_Component) {
    _inherits(NormalList, _Component);

    function NormalList() {
        _classCallCheck(this, NormalList);

        return _possibleConstructorReturn(this, (NormalList.__proto__ || Object.getPrototypeOf(NormalList)).apply(this, arguments));
    }

    _createClass(NormalList, [{
        key: 'render',
        value: function render() {
            var _props = this.props;

            return _react2.default.createElement(
                'div',
                { className: 'normal-list' },
                _react2.default.createElement(Header, {
                    titles: _props.headerTitles }),
                _react2.default.createElement(Content, {
                    listData: _props.data,
                    titles: _props.headerTitles,
                    itemKeys: _props.itemKeys,
                    listClick: _props.listClick })
            );
        }
    }]);

    return NormalList;
}(_react.Component);

exports.default = NormalList;


NormalList.propTypes = {
    data: _propTypes2.default.array.isRequired,
    headerTitles: _propTypes2.default.array.isRequired,
    itemKeys: _propTypes2.default.array.isRequired,
    listClick: _propTypes2.default.func.isRequired
};

var Header = function (_Component2) {
    _inherits(Header, _Component2);

    function Header() {
        _classCallCheck(this, Header);

        return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    }

    _createClass(Header, [{
        key: 'getItems',
        value: function getItems() {
            var _titles = this.props.titles;

            if (_titles) return _titles.map(function (item, index) {
                return _react2.default.createElement(
                    'div',
                    { key: index, className: 'normal-list-row-item' },
                    item
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: 'normal-list-header' },
                this.getItems()
            );
        }
    }]);

    return Header;
}(_react.Component);

var Content = function (_Component3) {
    _inherits(Content, _Component3);

    function Content() {
        _classCallCheck(this, Content);

        return _possibleConstructorReturn(this, (Content.__proto__ || Object.getPrototypeOf(Content)).apply(this, arguments));
    }

    _createClass(Content, [{
        key: 'getItems',
        value: function getItems(listIndex) {
            var _itemKeys = this.props.itemKeys;
            var _data = this.props.listData[listIndex];

            if (_itemKeys) return _itemKeys.map(function (itemKey, index) {
                return _react2.default.createElement(
                    'div',
                    { key: index, className: 'normal-list-row-item' },
                    _react2.default.createElement(
                        'span',
                        null,
                        _data[itemKey]
                    )
                );
            });
        }
    }, {
        key: 'getList',
        value: function getList() {
            var _this4 = this;

            var _listData = this.props.listData;

            if (_listData) return _listData.map(function (item, index) {
                return _react2.default.createElement(
                    'div',
                    { key: index, className: 'normal-list-row',
                        onClick: function onClick() {
                            return _this4.props.listClick(item);
                        } },
                    _this4.getItems(index)
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                { className: 'normal-list-content' },
                this.getList()
            );
        }
    }]);

    return Content;
}(_react.Component);
